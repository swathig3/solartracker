#include <msp430g2553.h>

int dayOfYear =210;
const int longitude = 28;
const int latitude =82 ;
const float gmtoffset = 5;
int minutes=00;
int hour=17;
int sign = 0;
int array_number;
float azimuth,v1,v2,v3,v4,v5,w5 ;
float timeinput,x;
int B,VAL;

float sum31, sum311,sum3111, sum312,sum313,sum2, sum32,sum33,sum34,sum322 , sum323;
float LSTM,HRA,EOT, LST,TC,declination, elevation, sum1;
int result;
float val,z;
float  sum3 ;
long eot1,eot2,eot3 ,eot;


const float number[361] =
		{0,0.25,0.5,0.75,1,1.25,1.5,1.75,2,2.25,2.5,2.75,3,3.25,3.5,3.75,4,4.25,4.5,4.75,
		 5,5.25,5.5,5.75,6,6.25,6.5,6.75,7,7.25,7.5,7.75,8,8.25,8.5,8.75,9,9.25,9.5,9.75,
		 10,10.25,10.5,10.75,11,11.25,11.5,11.75,12,12.25,12.5,12.75,13,13.25,13.5,13.75,14,14.25,14.5,14.75,
		 15,15.25,15.5,15.75,16,16.25,16.5,16.75,17,17.25,17.5,17.75,18,18.25,18.5,18.75,19,19.25,19.5,19.75,
		 20,20.25,20.5,20.75,21,21.25,21.5,21.75,22,22.25,22.5,22.75,23,23.25,23.5,23.75,24,24.25,24.5,24.75,
		 25,25.25,25.5,25.75,26,26.25,26.5,26.75,27,27.25,27.5,27.75,28,28.25,28.5,28.75,29,29.25,29.5,29.75,
		 30,30.25,30.5,30.75,31,31.25,31.5,31.75,32,32.25,32.5,32.75,33,33.25,33.5,33.75,34,34.25,34.5,34.75,
		 35,35.25,35.5,35.75,36,36.25,36.5,36.75,37,37.25,37.5,37.75,38,38.25,38.5,38.75,39,39.25,39.5,39.75,
		 40,40.25,40.5,40.75,41,41.25,41.5,41.75,42,42.25,42.5,42.75,43,43.25,43.5,43.75,44,44.25,44.5,44.75,
		 45,45.25,45.5,45.75,46,46.25,46.5,46.75,47,47.25,47.5,47.75,48,48.25,48.5,48.75,49,49.25,49.5,49.75,
		 50,50.25,50.5,50.75,51,51.25,51.5,51.75,52,52.25,52.5,52.75,53,53.25,53.5,53.75,54,54.25,54.5,54.75,
		 55,55.25,55.5,55.75,56,56.25,56.5,56.75,57,57.25,57.5,57.75,58,58.25,58.5,58.75,59,59.25,59.5,59.75,
		 60,60.25,60.5,60.75,61,61.25,61.5,61.75,62,62.25,62.5,62.75,63,63.25,63.5,63.75,64,64.25,64.5,64.75,
		 65,65.25,65.5,65.75,66,66.25,66.5,66.75,67,67.25,67.5,67.75,68,68.25,68.5,68.75,69,69.25,69.5,69.75,
		 70,70.25,70.5,70.75,71,71.25,71.5,71.75,72,72.25,72.5,72.75,73,73.25,73.5,73.75,74,74.25,74.5,74.75,
		 75,75.25,75.5,75.75,76,76.25,76.5,76.75,77,77.25,77.5,77.75,78,78.25,78.5,78.75,79,79.25,79.5,79.75,
	 	 80,80.25,80.5,80.75,81,81.25,81.5,81.75,82,82.25,82.5,82.75,83,83.25,83.5,83.75,84,84.25,84.5,84.75,
	 	 85,85.25,85.5,85.75,86,86.25,86.5,86.75,87,87.25,87.5,87.75,88,88.25,88.5,88.75,89,89.25,89.5,89.75,
		 90	};

const int spa_sine_lut[361] =
{1,5,10,14,18,23,27,31,36,40,44,49,53,57,62,66,71,75,79,84,
 88,92,97,101,105,110,114,118,123,127,131,136,140,144,149,153,157,161,166,170,
 174,179,183,187,191,196,200,204,209,213,217,221,226,230,234,238,243,247,251,255,
 259,264,268,272,276,280,285,289,293,297,301,305,310,314,318,322,326,330,334,339,
 343,347,351,355,359,363,367,371,375,379,383,387,391,395,399,403,407,411,415,419,
 423,427,431,435,439,443,447,451,454,458,462,466,470,474,478,481,485,489,493,497,
 500,504,508,512,515,519,523,527,530,534,538,541,545,549,552,556,560,563,567,570,
 574,578,581,585,588,592,595,599,602,606,609,613,616,619,623,626,630,633,636,640,
 643,646,650,653,656,660,663,666,669,673,676,679,682,685,689,692,695,698,701,704,
 707,710,714,717,720,723,726,729,732,735,738,740,743,746,749,752,755,758,761,763,
 766,769,772,775,777,780,783,786,788,791,794,796,799,801,804,807,809,812,814,817,
 819,822,824,827,829,832,834,836,839,841,844,846,848,851,853,855,857,860,
 862,864,866,868,870,873,875,877,879,881,883,885,887,889,891,893,895,897,
 899,901,903,905,906,908,910,912,914,915,917,919,921,922,924,926,927,929,
 930,932,934,935,937,938,940,941,943,944,946,947,948,950,951,952,954,955,
 956,958,959,960,961,962,964,965,966,967,968,969,970,971,972,973,974,975,
 976,977,978,979,980,981,982,982,983,984,985,986,986,987,988,988,989,990,
 990,991,991,992,993,993,994,994,995,995,995,996,996,997,997,997,998,998,
 998,998,999,999,999,999,999,1000,1000,1000,1000,1000,1000,1000,1000};

void SPA_Calc_B(void);
void SPA_Calc_LSTM(void);
void SPA_Calc_EOT(void);
void SPA_Calc_TC(void);
void SPA_Calc_LST(void);
void SPA_Calc_HRA(void);
void SPA_Calc_VAL(void);
void SPA_Calc_declination(void);
void SPA_Calc_elevation(void);
void SPA_Calc_azimuth(void);
void SPA_sunrise(void);
void SPA_sunset(void);

int SPA_Sine_LUT(float x);
int SPA_Cosine_LUT(float x);
int get_array_number_sine(float x);
int get_array_number_cos(float x);

float SPA_InvSine_LUT(long x);
float SPA_InvCosine_LUT(long x);


long int SPA_getVal(long val);
long int SPA_getInvCosineVal(long val);

void main(void)
{
    WDTCTL = WDTPW + WDTHOLD;
    timeinput =  (float)hour + ((( (minutes*100)/60) *0.01));

SPA_Calc_B() ;
z = SPA_Cosine_LUT(89);
SPA_Calc_LSTM();
 SPA_Calc_EOT();
 SPA_Calc_TC();
 SPA_Calc_LST();
SPA_Calc_HRA();
 SPA_Calc_VAL();
SPA_Calc_declination();
SPA_Calc_elevation();
SPA_Calc_azimuth();
SPA_sunrise();
SPA_sunset();

}

void SPA_Calc_B(void)

	{      B = (0.986)* (dayOfYear - 81);
	}

void SPA_Calc_LSTM(void)
{
	LSTM =15.0 * gmtoffset;
}

void SPA_Calc_EOT(void)
{



	  eot1 = 987l * (SPA_Sine_LUT(2 * B));

	  eot2 = 753l * (SPA_Cosine_LUT(B));

	  eot3 = 150l * ( SPA_Sine_LUT(B)) ;
	eot = eot1-eot2-eot3;
	 EOT = (float)eot / 100000;
}

void SPA_Calc_TC(void)
{
	TC = 4* ((float)longitude -LSTM)+ EOT; // tc is in minutes
}


void SPA_Calc_LST(void)
{
	LST = timeinput + (TC/(float)60);
}


void SPA_Calc_HRA(void)
{
	HRA = (float)15 *( LST - (float)12);// hra is in degrees
}


void SPA_Calc_VAL(void)
{
	VAL = (0.986)*  (float)(284 + dayOfYear);
}


void SPA_Calc_declination(void)
{

	declination = ( (float)23.45 * SPA_Sine_LUT(VAL) )/(float)1000 ; //23.45 * sin (value_radian);
}

void SPA_Calc_elevation(void)
{
   sum1 = ((float) SPA_Sine_LUT(declination) *  (float)SPA_Sine_LUT(latitude) )/ (float)1000000;
   sum2 = ((float)SPA_Cosine_LUT(latitude)* (float)SPA_Cosine_LUT (declination) * (float)SPA_Cosine_LUT(HRA))/ (float)1000000000 ;
   sum3 =(sum1 +sum2)*1000; //139 951 -544
elevation = SPA_InvSine_LUT(sum3 );

}

void SPA_Calc_azimuth(void)
{
 sum31 = ((float) SPA_Sine_LUT(declination)/(float)1000);
sum311 =	 (float)SPA_Sine_LUT(elevation)/(float)1000;
sum3111 =		( (float)SPA_Sine_LUT(latitude))/(float)1000 ;
sum313 = sum311 * sum3111;
 sum312 = sum31 -sum313;
 sum32 =(float)SPA_Cosine_LUT(elevation)/ (float)1000;
 sum322 =(float)SPA_Cosine_LUT(latitude)/ (float)1000;
 sum323 = sum32 *sum322;
 sum33 = (sum312/sum323)*1000 ;
 sum34 =  SPA_InvCosine_LUT(sum33 );

if(HRA>0)
 { azimuth = (float)360 -sum34;}
 else {azimuth =sum34;}

}

void SPA_sunrise(void)
{
	v1 = -( SPA_Sine_LUT(latitude) *SPA_Sine_LUT(declination));
	v2 = ( SPA_Cosine_LUT(latitude) *SPA_Cosine_LUT(declination));
	v3 = v1/v2;
	 v4 =  SPA_InvCosine_LUT(v3 )/15;
	 v5 = 12 -v4 -(TC/60);
	 //v6 = (v5 % 1);// * 100);
}

void SPA_sunset(void)
{
	 float w1 = -( SPA_Sine_LUT(latitude) *SPA_Sine_LUT(declination));
	 float w2 = ( SPA_Cosine_LUT(latitude) *SPA_Cosine_LUT(declination));
	 float w3 = w1/w2;
	 float w4 =  SPA_InvCosine_LUT(w3 )/15;
	 w5 = 12 + w4 -(TC/60);
}


int SPA_Sine_LUT(float x)
{

	array_number = get_array_number_sine(x);
    result = spa_sine_lut[array_number];
    if (sign)
    {result =-result;}
    return result;
}

int get_array_number_sine(float x)
{

	int i =0;

if(x<0)
		{
		val =  x + 360;
		sign = 1;
			if(val>270 && val <= 360)
			{
			val = 360 - val;
			}
			else if(val>180 && val <= 270)
			{
		   val = val - 180 ;
			}
			else if(val > 90 && val <=180)
			{
		    val = 180 - val;
			}
			else if(val <= 90)
			{
		    val = val;
			}

		}
	else if(x <= 90)
	{
    val = x;
    sign = 0;
	}
	else if(x > 90 && x <=180)
	{
    val = 180 - x;
     sign = 0; //+ve
	}
	else if(x>180 && x <= 270)
	{
   val = x - 180 ;
    sign = 1; //-ve
	}
	else if(x>270 && x <= 360)
	{
   val = 360 - x;
    sign = 1; //-ve
	}
	else if(x > 360)
	{
		val = x - 360;

		if(val > 90 && val <=180)
           {
              val = 180 - val;
               sign = 0; //+ve
           }
	}
	//float  d= round(val * 10.0)/10.0;
		while(val > number[i])
    {
       i++;
    }

    array_number =i;
    return ( array_number);
}



int SPA_Cosine_LUT(float x)
{

	 array_number = get_array_number_cos(x);
	 result = spa_sine_lut[array_number];
	 if (sign)
	    {result =-result;}
     return result;
}


int get_array_number_cos(float x)
{ 	float val;

	  int i =0;

	  if(x<0)
	  		{
	  		val =  x + 360;
	  		sign = 0;
	  			if(val>270 && val <= 360)
	  			{
	  			val = 360 - val;
	  			 sign = 0;
	  			}
	  			else if(val>180 && val <= 270)
	  			{
	  		   val = val - 180 ;
	  		   sign = 1;
	  			}
	  			else if(val > 90 && val <=180)
	  			{
	  		    val = 180 - val;
	  		    sign = 1;
	  			}
	  			else if(val <= 90)
	  			{
	  		    val = val;
	  		    sign = 0;
	  			}

	  		}

	          else if(x <= 90)
	 	        {
	 	           val = x;
	 	          sign = 0;
	 	        }
	 	        else if(x > 90 && x <=180)
	 	        {
	 	           val = 180 - x;
	 	            sign = 1; //-ve
	 	        }
	 	        else if(x>180 && x <= 270)
	 	        {
	 	          val = x - 180 ;
	 	           sign = 1; //-ve
	 	        }
	 	        else if(x>270 && x <= 360)
	 	        {
	 	          val = 360 - x;
	 	           sign = 0; //+ve
	 	        }
	 	        if(x > 360)
	 	        {
	 	          val = x - 360;
	 	          if(val > 90 && val <=180)
	 	                            {
	 	                               val = 180 - val;
	 	                                sign = 0; //+ve
	 	                            }
	 	        }

	//float  d= round(val * 10.0)/10.0;
		while(val > number[i])
          {
				i++;
          }

    array_number =360 - i;
    return ( array_number);
}


float SPA_InvSine_LUT(long x)
{


    int angle=0;;
	float angle_value;
    if(x < 0)
    {
        sign = 1;
    }
    else
    {
        sign = 0;
    }

    x = abs(x);

    if(x < 1000)
    {
        angle = SPA_getVal(x);
    }
    else
    {
       angle = 90;
    }
    angle_value = number[angle];
    if(sign)
    	 angle_value = (float)180 - angle_value;

    return( angle_value);
}

float SPA_InvCosine_LUT(long x)
{

	int angle=0;
	    float angle_value;
    if(x < 0)
    {
        sign = 1;
    }
    else
    {
        sign = 0;
    }

    x = abs(x);

    if(x < 1000)
    {
        angle = SPA_getInvCosineVal(x);
    }
    else
    {
      angle = 0;
    }
    angle_value = number[angle];
     if(sign)
    angle_value = (float)180 - angle_value;
    return( angle_value);


}



long int SPA_getVal(long val)
{

    int i =0;

    while(val > spa_sine_lut[i])
    {

       i++;
    }

    return (i);
}
long int SPA_getInvCosineVal(long val)
{
	int i =0;

	    while(val > spa_sine_lut[i])
	    {

	       i++;
	    }

	    return (360-i);
}
